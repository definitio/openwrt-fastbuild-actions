From: Alexey Sadkov <alx.v.sadkov@gmail.com>
Date: Fri, 7 Nov 2020 7:49:17 +0300
Subject: Add NXP Semiconductors TFA9882 DAC with amplifier support for Xiaomi Lumi Gateway MIEU01.
---

diff -ruN a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
--- a/sound/soc/codecs/Kconfig	2020-08-26 11:30:00.000000000 +0300
+++ b/sound/soc/codecs/Kconfig	2020-11-16 20:54:22.349269200 +0300
@@ -149,6 +149,7 @@
 	select SND_SOC_TAS571X if I2C
 	select SND_SOC_TAS5720 if I2C
 	select SND_SOC_TFA9879 if I2C
+	select SND_SOC_TFA9882
 	select SND_SOC_TLV320AIC23_I2C if I2C
 	select SND_SOC_TLV320AIC23_SPI if SPI_MASTER
 	select SND_SOC_TLV320AIC26 if SPI_MASTER
@@ -883,6 +884,9 @@
 	tristate "NXP Semiconductors TFA9879 amplifier"
 	depends on I2C
 
+config SND_SOC_TFA9882
+	tristate "NXP Semiconductors TFA9882 DAC with amplifier"
+
 config SND_SOC_TLV320AIC23
 	tristate
 
diff -ruN a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
--- a/sound/soc/codecs/Makefile	2020-08-26 11:30:00.000000000 +0300
+++ b/sound/soc/codecs/Makefile	2020-11-12 21:39:19.000000000 +0300
@@ -157,6 +157,7 @@
 snd-soc-tas571x-objs := tas571x.o
 snd-soc-tas5720-objs := tas5720.o
 snd-soc-tfa9879-objs := tfa9879.o
+snd-soc-tfa9882-objs := tfa9882.o
 snd-soc-tlv320aic23-objs := tlv320aic23.o
 snd-soc-tlv320aic23-i2c-objs := tlv320aic23-i2c.o
 snd-soc-tlv320aic23-spi-objs := tlv320aic23-spi.o
@@ -395,6 +396,7 @@
 obj-$(CONFIG_SND_SOC_TAS571X)	+= snd-soc-tas571x.o
 obj-$(CONFIG_SND_SOC_TAS5720)	+= snd-soc-tas5720.o
 obj-$(CONFIG_SND_SOC_TFA9879)	+= snd-soc-tfa9879.o
+obj-$(CONFIG_SND_SOC_TFA9882)	+= snd-soc-tfa9882.o
 obj-$(CONFIG_SND_SOC_TLV320AIC23)	+= snd-soc-tlv320aic23.o
 obj-$(CONFIG_SND_SOC_TLV320AIC23_I2C)	+= snd-soc-tlv320aic23-i2c.o
 obj-$(CONFIG_SND_SOC_TLV320AIC23_SPI)	+= snd-soc-tlv320aic23-spi.o
diff -ruN a/sound/soc/codecs/tfa9882.c b/sound/soc/codecs/tfa9882.c
--- a/sound/soc/codecs/tfa9882.c	1970-01-01 03:00:00.000000000 +0300
+++ b/sound/soc/codecs/tfa9882.c	2020-11-12 21:39:19.000000000 +0300
@@ -0,0 +1,238 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * tfa9882.c  --  TFA9882 ALSA SoC Audio driver
+ *
+ * Copyright 2009 Wolfson Microelectronics plc
+ * Copyright 2017 NXP
+ *
+ * Based on WM8524 ALSA SoC Audio driver written by Mihai Serban
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+#include <linux/gpio/consumer.h>
+#include <linux/of_device.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/initval.h>
+
+#define TFA9882_NUM_RATES 7
+
+/* codec private data */
+struct tfa9882_priv {
+	struct gpio_desc *mute;
+	unsigned int sysclk;
+	unsigned int rate_constraint_list[TFA9882_NUM_RATES];
+	struct snd_pcm_hw_constraint_list rate_constraint;
+};
+
+
+static const struct snd_soc_dapm_widget tfa9882_dapm_widgets[] = {
+SND_SOC_DAPM_DAC("DAC", "Playback", SND_SOC_NOPM, 0, 0),
+SND_SOC_DAPM_OUTPUT("LINEVOUTL"),
+SND_SOC_DAPM_OUTPUT("LINEVOUTR"),
+};
+
+static const struct snd_soc_dapm_route tfa9882_dapm_routes[] = {
+	{ "LINEVOUTL", NULL, "DAC" },
+	{ "LINEVOUTR", NULL, "DAC" },
+};
+
+static const struct {
+	int value;
+	int ratio;
+} lrclk_ratios[TFA9882_NUM_RATES] = {
+	{ 1, 128 },
+	{ 2, 192 },
+	{ 3, 256 },
+	{ 4, 384 },
+	{ 5, 512 },
+	{ 6, 768 },
+	{ 7, 1152 },
+};
+
+static int tfa9882_startup(struct snd_pcm_substream *substream,
+			  struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct tfa9882_priv *tfa9882 = snd_soc_codec_get_drvdata(codec);
+
+	/* The set of sample rates that can be supported depends on the
+	 * MCLK supplied to the CODEC - enforce this.
+	 */
+	if (!tfa9882->sysclk) {
+		dev_err(codec->dev,
+			"No MCLK configured, call set_sysclk() on init\n");
+		return -EINVAL;
+	}
+
+	snd_pcm_hw_constraint_list(substream->runtime, 0,
+					   SNDRV_PCM_HW_PARAM_RATE,
+					   &tfa9882->rate_constraint);
+
+	return 0;
+}
+
+static void tfa9882_shutdown(struct snd_pcm_substream *substream,
+			  struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct tfa9882_priv *tfa9882 = snd_soc_codec_get_drvdata(codec);
+
+}
+
+static int tfa9882_set_dai_sysclk(struct snd_soc_dai *codec_dai,
+		int clk_id, unsigned int freq, int dir)
+{
+	struct snd_soc_codec *codec = codec_dai->codec;
+	struct tfa9882_priv *tfa9882 = snd_soc_codec_get_drvdata(codec);
+	unsigned int val;
+	int i, j = 0;
+
+	tfa9882->sysclk = freq;
+
+	tfa9882->rate_constraint.count = 0;
+	for (i = 0; i < ARRAY_SIZE(lrclk_ratios); i++) {
+		val = freq / lrclk_ratios[i].ratio;
+		/* Check that it's a standard rate since core can't
+		 * cope with others and having the odd rates confuses
+		 * constraint matching.
+		 */
+		switch (val) {
+		case 8000:
+		case 32000:
+		case 44100:
+		case 48000:
+		case 88200:
+		case 96000:
+		case 176400:
+		case 192000:
+			dev_dbg(codec->dev, "Supported sample rate: %dHz\n",
+				val);
+			tfa9882->rate_constraint_list[j++] = val;
+			tfa9882->rate_constraint.count++;
+			break;
+		default:
+			dev_dbg(codec->dev, "Skipping sample rate: %dHz\n",
+				val);
+		}
+	}
+
+	/* Need at least one supported rate... */
+	if (tfa9882->rate_constraint.count == 0)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int tfa9882_set_fmt(struct snd_soc_dai *codec_dai, unsigned int fmt)
+{
+	fmt &= (SND_SOC_DAIFMT_FORMAT_MASK | SND_SOC_DAIFMT_INV_MASK |
+		SND_SOC_DAIFMT_MASTER_MASK);
+
+	if (fmt != (SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+		    SND_SOC_DAIFMT_CBS_CFS)) {
+		dev_err(codec_dai->dev, "Invalid DAI format\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+#define TFA9882_RATES SNDRV_PCM_RATE_8000_192000
+
+#define TFA9882_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE)  
+                           
+
+static const struct snd_soc_dai_ops tfa9882_dai_ops = {
+	.startup	= tfa9882_startup,
+	.shutdown	= tfa9882_shutdown,
+	.set_sysclk	= tfa9882_set_dai_sysclk,
+	.set_fmt	= tfa9882_set_fmt,
+};
+
+static struct snd_soc_dai_driver tfa9882_dai = {
+	.name = "tfa9882-hifi",
+	.playback = {
+		.stream_name = "Playback",
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = TFA9882_RATES,
+		.formats = TFA9882_FORMATS,
+	},
+	.ops = &tfa9882_dai_ops,
+};
+
+static int tfa9882_probe(struct snd_soc_codec *codec)
+{
+	struct tfa9882_priv *tfa9882 = snd_soc_codec_get_drvdata(codec);
+
+	tfa9882->rate_constraint.list = &tfa9882->rate_constraint_list[0];
+	tfa9882->rate_constraint.count =
+		ARRAY_SIZE(tfa9882->rate_constraint_list);
+
+	return 0;
+}
+
+static const struct snd_soc_codec_driver soc_codec_dev_tfa9882 = {
+	.probe			= tfa9882_probe,
+	.component_driver = {
+		.dapm_widgets		= tfa9882_dapm_widgets,
+		.num_dapm_widgets	= ARRAY_SIZE(tfa9882_dapm_widgets),
+		.dapm_routes		= tfa9882_dapm_routes,
+		.num_dapm_routes	= ARRAY_SIZE(tfa9882_dapm_routes),
+	}
+};
+
+static const struct of_device_id tfa9882_of_match[] = {
+	{ .compatible = "fsl,tfa9882" },
+	{ /* sentinel*/ }
+};
+MODULE_DEVICE_TABLE(of, tfa9882_of_match);
+
+static int tfa9882_codec_probe(struct platform_device *pdev)
+{
+	struct tfa9882_priv *tfa9882;
+	int ret;
+
+	tfa9882 = devm_kzalloc(&pdev->dev, sizeof(struct tfa9882_priv),
+						  GFP_KERNEL);
+	if (tfa9882 == NULL)
+		return -ENOMEM;
+
+	platform_set_drvdata(pdev, tfa9882);
+
+	ret = snd_soc_register_codec(&pdev->dev,
+			&soc_codec_dev_tfa9882, &tfa9882_dai, 1);
+	if (ret < 0)
+		dev_err(&pdev->dev, "Failed to register component: %d\n", ret);
+
+	return ret;
+}
+
+
+static int tfa9882_codec_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_codec(&pdev->dev);
+	return 0;
+}
+
+static struct platform_driver tfa9882_codec_driver = {
+	.probe		= tfa9882_codec_probe,
+	.remove		= tfa9882_codec_remove,
+	.driver		= {
+		.name	= "tfa9882-codec",
+		.of_match_table = tfa9882_of_match,
+	},
+};
+module_platform_driver(tfa9882_codec_driver);
+
+MODULE_DESCRIPTION("ASoC tfa9882 driver");
+MODULE_AUTHOR("-=Alx=- <alx.v.sadkov@gmail.com>");
+MODULE_ALIAS("platform:tfa9882-codec");
+MODULE_LICENSE("GPL");
diff -ruN a/sound/soc/fsl/fsl_sai.c b/sound/soc/fsl/fsl_sai.c
--- a/sound/soc/fsl/fsl_sai.c	2020-11-30 18:42:34.305368600 +0300
+++ b/sound/soc/fsl/fsl_sai.c	2020-11-30 20:02:29.527059700 +0300
@@ -401,6 +401,15 @@
 
 	return 0;
 }
+static int fsl_sai_set_dai_bclk_ratio(struct snd_soc_dai *dai,
+				      unsigned int ratio)
+{
+	struct fsl_sai *sai = snd_soc_dai_get_drvdata(dai);
+
+	sai->bclk_ratio = ratio;
+
+	return 0;
+}
 
 static int fsl_sai_hw_params(struct snd_pcm_substream *substream,
 		struct snd_pcm_hw_params *params,
@@ -422,8 +431,14 @@
 		slot_width = sai->slot_width;
 
 	if (!sai->is_slave_mode) {
-		ret = fsl_sai_set_bclk(cpu_dai, tx,
-				slots * slot_width * params_rate(params));
+		if (sai->bclk_ratio)
+			ret = fsl_sai_set_bclk(cpu_dai, tx,
+					       sai->bclk_ratio *
+					       params_rate(params));
+		else
+			ret = fsl_sai_set_bclk(cpu_dai, tx,
+					       slots * slot_width *
+					       params_rate(params));
 		if (ret)
 			return ret;
 
@@ -512,6 +527,8 @@
 	struct fsl_sai *sai = snd_soc_dai_get_drvdata(cpu_dai);
 	bool tx = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
 	u32 xcsr, count = 100;
+	unsigned int channels = substream->runtime->channels;
+	int i;
 
 	/*
 	 * Asynchronous mode: Clear SYNC for both Tx and Rx.
@@ -531,6 +548,11 @@
 	case SNDRV_PCM_TRIGGER_START:
 	case SNDRV_PCM_TRIGGER_RESUME:
 	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		for (i = 0; tx && i < channels; i++)
+			regmap_write(sai->regmap, FSL_SAI_TDR, 0x0);
+		if (tx)
+			udelay(10);
+
 		regmap_update_bits(sai->regmap, FSL_SAI_xCSR(tx),
 				   FSL_SAI_CSR_FRDE, FSL_SAI_CSR_FRDE);
 
@@ -631,6 +653,7 @@
 }
 
 static const struct snd_soc_dai_ops fsl_sai_pcm_dai_ops = {
+	.set_bclk_ratio = fsl_sai_set_dai_bclk_ratio,
 	.set_sysclk	= fsl_sai_set_dai_sysclk,
 	.set_fmt	= fsl_sai_set_dai_fmt,
 	.set_tdm_slot	= fsl_sai_set_dai_tdm_slot,
@@ -653,7 +676,7 @@
 	regmap_write(sai->regmap, FSL_SAI_RCSR, 0);
 
 	regmap_update_bits(sai->regmap, FSL_SAI_TCR1, FSL_SAI_CR1_RFW_MASK,
-			   FSL_SAI_MAXBURST_TX * 2);
+			   FSL_SAI_FIFO_DEPTH - FSL_SAI_MAXBURST_TX);
 	regmap_update_bits(sai->regmap, FSL_SAI_RCR1, FSL_SAI_CR1_RFW_MASK,
 			   FSL_SAI_MAXBURST_RX - 1);
 
@@ -776,6 +799,7 @@
 	.reg_bits = 32,
 	.reg_stride = 4,
 	.val_bits = 32,
+	.fast_io = true,
 
 	.max_register = FSL_SAI_RMR,
 	.reg_defaults = fsl_sai_reg_defaults,
@@ -912,10 +936,13 @@
 	if (ret)
 		return ret;
 
-	if (sai->sai_on_imx)
-		return imx_pcm_dma_init(pdev, IMX_SAI_DMABUF_SIZE);
-	else
-		return devm_snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);
+	if (sai->sai_on_imx) {
+		ret = imx_pcm_dma_init(pdev, IMX_SAI_DMABUF_SIZE);
+	}else {
+		ret = devm_snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);
+	}
+
+	return ret;
 }
 
 static const struct of_device_id fsl_sai_ids[] = {
diff -ruN a/sound/soc/fsl/fsl_sai.h b/sound/soc/fsl/fsl_sai.h
--- a/sound/soc/fsl/fsl_sai.h	2020-11-30 18:42:34.305368600 +0300
+++ b/sound/soc/fsl/fsl_sai.h	2020-11-30 20:02:29.527059700 +0300
@@ -128,7 +128,7 @@
 /* SAI data transfer numbers per DMA request */
 #define FSL_SAI_MAXBURST_TX 6
 #define FSL_SAI_MAXBURST_RX 6
-
+#define FSL_SAI_FIFO_DEPTH 32
 struct fsl_sai {
 	struct platform_device *pdev;
 	struct regmap *regmap;
@@ -145,6 +145,7 @@
 	unsigned int mclk_streams;
 	unsigned int slots;
 	unsigned int slot_width;
+	unsigned int bclk_ratio;
 
 	struct snd_dmaengine_dai_dma_data dma_params_rx;
 	struct snd_dmaengine_dai_dma_data dma_params_tx;
